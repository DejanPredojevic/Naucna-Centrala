package ftn.uns.ac.rs.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import ftn.uns.ac.rs.dto.FormAdminCheckResponse;
import ftn.uns.ac.rs.dto.FormEnumResponse;
import ftn.uns.ac.rs.dto.FormFieldsResponse;
import ftn.uns.ac.rs.dto.FormSubmissionRequest;
import ftn.uns.ac.rs.dto.ProcesDto;
import ftn.uns.ac.rs.services.NewMagazineService;

@Controller
public class NewMagazineController {
		
		@Autowired
		NewMagazineService newMagazineService;
		
		@GetMapping(path = "/startNewMagazine", produces = "application/json")
	    public ResponseEntity<FormFieldsResponse> startRegistration() {
			FormFieldsResponse paymentOrderResponse = newMagazineService.start();
	        return ResponseEntity.ok().body(paymentOrderResponse);
	    }
		
		@PostMapping(path = "/saveMagazine/{taskId}", produces = "application/json")
	    public ResponseEntity<ProcesDto> register(@RequestBody List<FormSubmissionRequest> dto, @PathVariable String taskId) {
			ProcesDto procesId = newMagazineService.saveMagazine(dto,taskId);
			return ResponseEntity.ok().body(procesId);
	        
	    }
		
		@GetMapping(path = "/getEnums/{processInstanceId}", produces = "application/json")
	    public ResponseEntity<FormEnumResponse> getEnums(@PathVariable String processInstanceId) {
			FormEnumResponse formEnumResponse = newMagazineService.getEnum(processInstanceId);
	        return ResponseEntity.ok().body(formEnumResponse);
	    }
		
		@PostMapping(path = "/updateMagazineData/{procesId}", produces = "application/json")
	    public ResponseEntity<Boolean> approveUser(@RequestBody List<FormSubmissionRequest> dto, @PathVariable String procesId) {
			Boolean valid = newMagazineService.updateMagazineData(dto,procesId);
			return ResponseEntity.ok().body(valid);
	    }
		
		@GetMapping(path = "/getAdminCheck/{processInstanceId}", produces = "application/json")
	    public ResponseEntity<FormAdminCheckResponse> getAdminCheck(@PathVariable String processInstanceId) {
			FormAdminCheckResponse formAdminCheckResponse = newMagazineService.getForAdminCheck(processInstanceId);
	        return ResponseEntity.ok().body(formAdminCheckResponse);
	    }
		
		@PostMapping(path = "/saveAdminCheck/{procesId}", produces = "application/json")
	    public ResponseEntity<Boolean> saveAdminCheck(@RequestBody List<FormSubmissionRequest> dto, @PathVariable String procesId) {
			Boolean valid = newMagazineService.saveAdminCheck(dto,procesId);
			return ResponseEntity.ok().body(valid);
	    }
}
