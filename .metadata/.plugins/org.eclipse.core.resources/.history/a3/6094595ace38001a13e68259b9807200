package ftn.uns.ac.rs.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.camunda.bpm.engine.FormService;
import org.camunda.bpm.engine.IdentityService;
import org.camunda.bpm.engine.RepositoryService;
import org.camunda.bpm.engine.RuntimeService;
import org.camunda.bpm.engine.TaskService;
import org.camunda.bpm.engine.form.FormField;
import org.camunda.bpm.engine.form.TaskFormData;
import org.camunda.bpm.engine.runtime.ProcessInstance;
import org.camunda.bpm.engine.task.Task;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;

import ftn.uns.ac.rs.dto.FormFieldsResponse;
import ftn.uns.ac.rs.dto.FormSubmissionRequest;
import ftn.uns.ac.rs.model.AdminApprovals;
import ftn.uns.ac.rs.model.ScientificArea;
import ftn.uns.ac.rs.model.UserData;
import ftn.uns.ac.rs.repository.AdminRepository;
import ftn.uns.ac.rs.repository.ScientificAreaRepository;
import ftn.uns.ac.rs.repository.UserDataRepository;

@Service
public class RegistrationService {

	@Autowired
	IdentityService identityService;
	
	@Autowired
	private RuntimeService runtimeService;
	
	@Autowired
	private RepositoryService repositoryService;
	
	@Autowired
	TaskService taskService;
	
	@Autowired
	FormService formService;
	
	@Autowired
	ScientificAreaRepository scientificRepo;
	
	@Autowired
	AdminRepository adminRepository;

	public FormFieldsResponse start() {
		ProcessInstance pi = runtimeService.startProcessInstanceByKey("Registracija");

		Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).list().get(0);
		
		TaskFormData tfd = formService.getTaskFormData(task.getId());
		List<FormField> properties = tfd.getFormFields();
		for(FormField fp : properties) {
			System.out.println(fp.getId() + fp.getType());
		}
		
		List<ScientificArea> area = scientificRepo.findAll();
		List<String> oblasti = new ArrayList<String>();
		for (ScientificArea scientificArea : area) {
			oblasti.add(scientificArea.getScientificArea());
		}
		
        return new FormFieldsResponse(task.getId(), pi.getId(), properties, oblasti);
	}
	
	public boolean register(List<FormSubmissionRequest> dto, @PathVariable String taskId) {
		
		Task task = taskService.createTaskQuery().taskId(taskId).singleResult();
		String processInstanceId = task.getProcessInstanceId();
		runtimeService.setVariable(processInstanceId, "userData", dto);
		runtimeService.setVariable(processInstanceId, "procesID", processInstanceId);

		for (int i = 0; i < dto.size(); i++) {
			if(dto.get(i).getFieldId().equals("oblast")) {
				dto.get(i).setFieldValue(null);
			}
		}
		HashMap<String, Object> map = this.mapListToDto(dto);
		formService.submitTaskForm(taskId, map);
		
        return true;
	}
	
	public List<AdminApprovals> getUserApproval() {
		
		List<AdminApprovals> approval = new ArrayList<AdminApprovals>();
		approval = adminRepository.findByStatus("Obrada");
		return approval;
		
	}
	
	public FormFieldsResponse getApproval(String procesID) {
		Task task = taskService.createTaskQuery().processInstanceId(procesID).singleResult();
		taskService.createTaskQuery().processInstanceId(procesID).active();
		TaskFormData tfd = formService.getTaskFormData(task.getId());
		List<FormField> properties = tfd.getFormFields();
		return new FormFieldsResponse(task.getId(), pi.getId(), properties, null);
	}
	
	private HashMap<String, Object> mapListToDto(List<FormSubmissionRequest> list)
	{
		HashMap<String, Object> map = new HashMap<String, Object>();
		for(FormSubmissionRequest temp : list){
			map.put(temp.getFieldId(), temp.getFieldValue());
		}
		
		return map;
	}
}
